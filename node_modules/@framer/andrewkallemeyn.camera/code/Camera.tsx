import * as React from "react"
import { Frame, addPropertyControls, ControlType } from "framer"

export function Camera(props) {
    const {
        facingMode,
        cameraOverlay,
        photoOverlay,
        onTakePhoto,
        cameraReset,
        ...rest
    } = props
    const [photoDataUri, setPhotoDataUri] = React.useState("")

    let video = React.useRef<HTMLVideoElement>()
    let stream = React.useRef<MediaStream>()
    let reset = React.useRef<Boolean>(cameraReset)

    React.useEffect(() => {
        if (navigator.mediaDevices) startCamera()
    }, [])

    React.useEffect(() => {
        if (cameraReset) {
            resetCamera()
        }
    }, [cameraReset])

    const startCamera = () => {
        // https://stackoverflow.com/questions/27420581/get-maximum-video-resolution-with-getusermedia
        navigator.mediaDevices
            .getUserMedia({
                video: {
                    facingMode: props.facingMode,
                    width: { ideal: 4096 },
                    height: { ideal: 2160 },
                },
            })
            .then(feed => {
                stream.current = feed
                console.log(video.current)
                video.current.srcObject = stream.current
                video.current.play()
            })
            .catch(function(err) {
                console.log(err)
            })
    }

    const stopCamera = () => {
        if (stream.current) {
            stream.current.getTracks().forEach(function(track) {
                track.stop()
            })
            stream.current = null
        }
    }

    const takePhoto = () => {
        const canvas = document.createElement("canvas")

        canvas.width = video.current.videoWidth
        canvas.height = video.current.videoHeight
        canvas.getContext("2d").drawImage(video.current, 0, 0)

        // Other browsers will fall back to image/png
        let photo = canvas.toDataURL("image/webp")

        setPhotoDataUri(photo)
        props.onTakePhoto(photo)

        // Now that we have the photo, stop the camera
        stopCamera()
    }

    const getPhoto = () => {
        return photoDataUri
    }

    const resetCamera = () => {
        setPhotoDataUri("")
        startCamera()
    }

    return (
        <Frame background={""} size={"100%"} style={wrapperStyle} {...rest}>
            <Frame
                size={"100%"}
                background={""}
                onTap={takePhoto}
                style={{
                    zIndex: 1,
                    display: getPhoto() == "" ? "block" : "none",
                }}
            >
                {cameraOverlay}
            </Frame>
            <Frame
                size={"100%"}
                background={""}
                style={{
                    zIndex: 1,
                    display: getPhoto() == "" ? "none" : "block",
                }}
            >
                {photoOverlay}
            </Frame>
            <img
                src={getPhoto()}
                style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    objectPosition: "50% 50%",
                    display: getPhoto() == "" ? "none" : "block",
                }}
            />

            <video
                ref={video}
                autoPlay={true}
                muted={true}
                controls={false}
                preload="auto"
                playsInline
                style={{
                    width: "100%",
                    height: "100%",
                    objectFit: "cover",
                    objectPosition: "50% 50%",
                    display: getPhoto() == "" ? "block" : "none",
                }}
            ></video>
        </Frame>
    )
}

Camera.defaultProps = {
    facingMode: "environment",
    background: "#000",
    cameraReset: false,
    onTakePhoto: () => null,
}

addPropertyControls(Camera, {
    facingMode: {
        type: ControlType.Enum,
        options: ["user", "environment"],
        optionTitles: ["Front", "Back"],
        title: "Camera",
    },

    cameraOverlay: {
        type: ControlType.ComponentInstance,
        title: "Camera Overlay",
    },

    photoOverlay: {
        type: ControlType.ComponentInstance,
        title: "Photo Overlay",
    },
})

const wrapperStyle: React.CSSProperties = {
    width: "100%",
    height: "100%",
    display: "flex",
    alignItems: "center",
    justifyContent: "center",
    overflow: "hidden",
}
